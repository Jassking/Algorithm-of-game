package cn.example.c_lk.b;

import java.util.Stack;

/*155. 最小栈
设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。
    push(x) ―― 将元素 x 推入栈中。
    pop() ―― 删除栈顶的元素。
    top() ―― 获取栈顶元素。
    getMin() ―― 检索栈中的最小元素。
示例:
输入：
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]
输出：
[null,null,null,null,-3,null,0,-2]
解释：
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.
提示：
    pop、top 和 getMin 操作总是在 非空栈 上调用。

*/
public class Main31 {
    public static void main(String[] args) {

    }

    /**
     * initialize your data structure here.
     */
    class MinStack {
        private Stack<Integer> minStack;
        private Stack<Integer> stack;

        public MinStack() {
            minStack = new Stack<>();
            stack = new Stack<>();
        }

        public void push(int x) {
                stack.push(x);
            if (!minStack.isEmpty()) {
                int top = minStack.peek();
                //小于的时候才入栈
                if (x <= top) {
                    minStack.push(x);
                }
            }else{
                minStack.push(x);
            }
        }

        public void pop() {
            int p = stack.pop();
            if (p==minStack.peek() ) {
                minStack.pop();
            }
        }

        public int top() {
            return stack.peek();
        }

        public int getMin() {
            return minStack.peek();
        }
    }
}
