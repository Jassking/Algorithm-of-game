package cn.example.lqb.b2018;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.math.BigInteger;

/*第四题：测试次数

x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。
各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，
并且评定出一个耐摔指数来，之后才允许上市流通。

x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，
与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。

如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。
特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。
如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n

为了减少测试次数，从每个厂家抽样3部手机参加测试。

某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？

请填写这个最多测试次数。*/
public class Main2 {
    public static void main(String[] args) throws FileNotFoundException {
        int dp[][]=new int[1001][4];//初始化dp的大小
        for (int n = 1; n <=3; n++) //它的手机个数
            for (int i = 1; i <=1000; i++) { //楼层数
                dp[i][n]=dp[i-1][n]+1;// 当前最优次数[楼层][2]=1+当前最优次数[楼层-1][2];//最坏情况
                for (int j = 1; j <i&&n>1; j++)
                    dp[i][n]=Math.min(dp[i][n],Math.max(dp[j-1][n-1], dp[i-j][n])+1);//然后math.min找最优解
            }

        System.out.println(dp[1000][3]);//当前最优次数；

    }
}
